var Calculator=function(r,n){"use strict";var t=function(r){var n=r.data;this.input=String(n),this.position=0,this.char=this.input[this.position],this.tokens=[],this.stash=[]};t.prototype.advance=function(){return this.char=this.input[++this.position]||""},t.prototype.lookahead=function(r){var n=r-this.stash.length;if(this.position>this.input.length)return"";for(;n-- >0;){for(var t=this.lex();"\0"===t;)t=this.lex();this.stash.push(t)}return this.stash[r-1]},t.prototype.peek=function(){return this.lookahead(1)},t.prototype.getNextChar=function(){return this.input[this.position+1]},t.prototype.getPreviousChar=function(){return this.input[this.position-1]},t.prototype.next=function(){var r;if(this.position>this.input.length)return"";for(;;){if(this.stash.length)return this.stash.shift();if("\0"!==(r=this.lex()))return r}throw new Error("wtf this should be unreachable: lexer.next")},t.prototype.skip=function(r){this.position+=r,this.char=this.input[this.position]},t.prototype.setLiteral=function(r){this.currentLiteral=r},t.prototype.getLiteral=function(){return this.currentLiteral},t.prototype.lex=function(){if(this.position>=this.input.length)return"";if(A(this.char))return this.advance(),"\0";var r=this.getParenToken()||this.getNumberToken()||this.getOperatorToken();if(null==r)throw new Error('Unrecognized token "'+this.char+'" at position '+this.position);return r},t.prototype.getParenToken=function(){var r=this.char;return l(this.char)?(this.advance(),r):null},t.prototype.getNumberToken=function(){var r=this.char;if(!(s(this.char)||p(this.char)&&s(this.getNextChar())))return null;for(;s(this.advance());)r+=this.char;if(p(this.char))do{r+=this.char}while(s(this.advance()));return this.setLiteral(r),r.length?"NUMBER_LITERAL":null},t.prototype.getOperatorToken=function(){this.char;if(i(this.char)){var r=this.input.substring(this.position,this.position+a).match(g);if(!r)throw new Error("wtf dooood there was not a opeator token found...");for(var n=r[0].length;n-- >0;)this.advance();return r[0]}return null};var e=["/","*","**","-","+","√","%"],a=e.reduce((function(r,n){return n.length>r?n.length:r}),0),o=function(r){return r.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")},s=function(r){return u.test(r)},i=function(r){return C.test(r)},l=function(r){return h.test(r)},A=function(r){return d.test(r)},p=function(r){return"."===r},c=function(r){return e.includes(r)},u=/[0-9]/,h=/[()]/,d=/\s/,C=new RegExp(Array.from(new Set(e.map((function(r){return r[0]})))).map((function(r){return o(r)})).join("|")),g=new RegExp(Array.from(e).sort((function(r,n){return n.length-r.length})).map((function(r){return o(r)})).join("|")),f=function(r){var n=r.lexer;this.lexer=n,this.position=0};f.prototype.parsePrimary=function(){var r,n=this.lexer.peek();if("\0"===n)throw console.log("WTF NULL STRING TOKEN",n),new Error("Unexpected end of expression");if("("===n){if(n=this.lexer.next(),r=this.parseExpression(),")"!==(n=this.lexer.next()))throw new SyntaxError('Expected ")", got '+n);return{type:"Expression",expression:r}}if("NUMBER_LITERAL"===n)return n=this.lexer.next(),{type:"NumberLiteral",value:this.lexer.getLiteral()};throw new SyntaxError("expected a number, a variable, or parentheses")},f.prototype.parseUnary=function(){var r=this.lexer.peek();return"-"===r||"+"===r?{type:"UnaryExpression",operator:r=this.lexer.next(),expression:this.parseUnary()}:this.parsePrimary()},f.prototype.parsePowAndSquare=function(){for(var r=this.parseUnary(),n=this.lexer.peek();"**"===n||"√"==n;)r={type:"BinaryExpression",operator:n=this.lexer.next(),left:r,right:this.parseUnary()},n=this.lexer.peek();return r},f.prototype.parseMultiplicative=function(){for(var r=this.parsePowAndSquare(),n=this.lexer.peek();"*"===n||"/"==n||"%"===n;)r={type:"BinaryExpression",operator:n=this.lexer.next(),left:r,right:this.parsePowAndSquare()},n=this.lexer.peek();return r},f.prototype.parseAdditive=function(){for(var r=this.parseMultiplicative(),n=this.lexer.peek();"+"===n||"-"===n;)r={type:"BinaryExpression",operator:n=this.lexer.next(),left:r,right:this.parseMultiplicative()},n=this.lexer.peek();return r},f.prototype.parseExpression=function(){return this.parseAdditive()},f.prototype.parse=function(){this.lexer;return{type:"ExpressionStatement",expression:this.parseExpression()}};var x={"+":function(r,n){return r+n},"-":function(r,n){return r-n},"*":function(r,n){return r*n},"/":function(r,n){return r/n},"%":function(r,n){return r%n},"**":function(r,n){return Math.pow(r,n)},"√":function(r,n){return Math.pow(r,1/n)}},b=function(r){var n;switch(r.type){case"ExpressionStatement":case"Expression":return b(r.expression);case"NumberLiteral":return parseFloat(r.value);case"UnaryExpression":switch(n=b(r.expression),r.operator){case"+":return+n;case"-":return-n;default:throw new Error('Parsing error: Unrecognized unary operator "'+r.operator+'"')}case"BinaryExpression":var t=r.left,e=r.right,a=r.operator,o=x[a];if(void 0===o)throw new Error("Unsupported operand");return o(b(t),b(e));default:throw new Error('Parsing error: Unrecognized node type "'+r.type+'"')}};var m="clear",O="clearEntry",E="backspace",v=[{id:"C",text:"C",className:"is-clear",action:m},{id:"CE",text:"CE",className:"is-clearEntry",action:O},{id:"negate",text:"+/-",className:"is-negation",action:"negate"},{id:"modulo",text:"%",className:"is-modulo",action:"updateOperator",args:{operator:"%"}},{id:"7",text:"7",action:"appendOperand",args:{value:"7"}},{id:"8",text:"8",action:"appendOperand",args:{value:"8"}},{id:"9",text:"9",action:"appendOperand",args:{value:"9"}},{id:"/",text:"/",className:"is-division",action:"updateOperator",args:{operator:"/"}},{id:"4",text:"4",action:"appendOperand",args:{value:"4"}},{id:"5",text:"5",action:"appendOperand",args:{value:"5"}},{id:"6",text:"6",action:"appendOperand",args:{value:"6"}},{id:"*",className:"is-multiplication",text:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 192"><path fill="inherit" d="M180.2 0L95.8 84.3 11.8.4 0 12.2 84 96 0 179.9l11.8 11.7 84-83.8 84.4 84.2 11.8-11.7L107.6 96 192 11.8z"/></svg>',action:"updateOperator",args:{operator:"*"}},{id:"1",text:"1",action:"appendOperand",args:{value:"1"}},{id:"2",text:"2",action:"appendOperand",args:{value:"2"}},{id:"3",text:"3",action:"appendOperand",args:{value:"3"}},{id:"-",className:"is-subtraction",text:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 17"><path d="M256 17H0V0h256v17z"/></svg>\n',action:"updateOperator",args:{operator:"-"}},{id:"0",text:"0",action:"appendOperand",args:{value:"0"}},{id:"(",text:"(",className:["is-paren","is-open-paren"],action:"addParen",args:{operator:"("}},{id:")",text:")",className:["is-paren","is-close-paren"],action:"addParen",args:{operator:")"}},{id:".",text:".",action:"appendOperand",args:{value:"."}},{id:"+",text:"",className:"is-addition",text:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256"><path d="M256 137H136v119h-17V137H0v-17h119V0h17v120h120v17z"/></svg>',action:"updateOperator",args:{operator:"+"}}],w=Number.MAX_SAFE_INTEGER.toString().length;var _=[{match:{key:"Enter"},action:"showTotal"},{match:{key:"Backspace"},action:E},{match:{key:"Escape"},action:m},{match:{key:"Delete"},action:O}].concat(["1","2","3","4","5","6","7","8","9"].map((function(r){return{match:{key:r},action:"appendOperand",args:{value:r}}})),["*","+","-","/"].map((function(r){return{match:{key:r},action:"updateOperator",args:{value:r}}}))),N={props:{commands:{type:Array,default:function(){return _}},defaultFormula:{type:Array,default:function(){return[]}}},data:function(){return{MODE_SHOW_TOTAL:2,MODE_INSERT_OPERAND:4,MODE_APPEND_OPERAND:8,activeButtons:[],expressions:this.$props.defaultFormula.slice(0),buttons:v,currentOperand:"147",currentOperator:"-",mode:6,openParenStack:0,error:null,total:147}},computed:{formuoli:function(){return this.expressions.map((function(r,n,t){var e=r.trim();return"("===t[n-1]?e:")"===e?e:"-"===e[0]&&function(r){return/^[0-9.]/.test(r)}(e[1])?" "+r:" "+e})).join("")},font:function(){var r,n,t;return(r=2&this.mode?this.total.toString().length:this.currentOperand.toString().length)<8?(n="60px",t="200"):r<=w?(n="28px",t="300"):r>=w&&(n="24px",t="300"),{size:n,weight:t}}},mounted:function(){window.addEventListener("keydown",this.onKeyDown)},methods:{onKeyDown:function(r){var n=this;event.defaultPrevented||this.commands.forEach((function(t){Object.keys(t.match).map((function(e){var a=t.match[e];r[e]===a&&(n.exec(t.action,t.args),n.$emit("key",{key:r.key,args:Object.assign({},t.args)}))}))}))},onExplicitEquals:function(){this.showTotal({explicit:!0})},exec:function(r,n){switch(console.log(r),r){case E:this.backspace(n),this.$emit("backspace");break;case m:this.clear(n),this.$emit("clear");break;case O:this.clearEntry(n),this.$emit("clear-entry");break;case"negate":this.negate(n),this.$emit("negate");break;case"updateOperator":this.updateOperator(n),this.$emit("operator-update");break;case"appendOperand":this.appendOperand(n),this.$emit("operand-append");break;case"addParen":this.addParen(n),this.$emit("paren-add");break;default:"development"===process.env.NODE_ENV&&console.error('action not found: "'+r+'"')}this.showTotal()},clear:function(){this.expressions=[],this.currentOperand="0",this.currentOperator="",this.openParenStack=0,this.mode=6,this.error=null,this.total=0},backspace:function(){var r=this.currentOperand.slice(0,-1);0===r.length&&(r="0"),this.currentOperand=r},clearEntry:function(){this.currentOperand="0"},negate:function(){0!==this.currentOperand&&(this.currentOperand=(-this.currentOperand).toString())},updateOperator:function(r){var n=r.operator,t=this.expressions.length,e=this.expressions[t-1]||"",a=this.mode,o=this.currentOperand;4&a?0===t?this.expressions.push(o,n):c(e)?(this.expressions.pop(),this.expressions.push(n)):")"===e?this.expressions.push(n):"("===e&&this.expressions.push(o,n):8&a&&(0===t?this.expressions.push(o,n):c(e)?this.expressions.push(o,n):")"===e?this.expressions.push(n):"("===e&&this.expressions.push(o,n)),this.currentOperator=n,this.mode=6},addParen:function(r){var n=r.operator,t=this.expressions[this.expressions.length-1]||"",e=this.currentOperand,a=this.openParenStack;")"===n&&0===a||"("===n&&")"===t||("("===t&&")"===n?this.expressions.push(e,n):c(t)&&")"===n?this.expressions.push(e,n):!c(t)&&0!==length||"("!==n||this.expressions.push(n),"("===n?this.openParenStack++:")"===n&&this.openParenStack--)},appendOperand:function(r){var n=r.value,t=(r.operator,this.currentOperand),e=t;"0"===n&&"0"===t[0]||"."===n&&t.includes(".")||(this.mode,4&this.mode?(e=n.toString(),this.mode=8):e+=n.toString(),this.currentOperand=e.substring(0,w))},showTotal:function(r){void 0===r&&(r={});var n,e=r.explicit,a=this.expressions[this.expressions.length-1]||"",o=this.expressions.slice(0),s=this.currentOperand,i=this.mode,l=this.total,A=this.openParenStack,p="number"==typeof Number(o[0]),u=c(o[1]||""),h=o.length;if(0!==o.length){if(e&&p&&u&&2===h?o.push(s):e&&c(a)?4&i?o.push(l):8&i&&o.push(s):c(a)&&o.pop(),e)for(var d=A;d-- >0;)o.push(")");else e||1!==A||o.push(")");try{C=o.join(" "),n=b(new f({lexer:new t({data:C})}).parse()),e&&this.clear(),this.total=n}catch(r){e&&(this.clear(),this.error=r,console.log(r),this.$emit("formula-error",r))}var C;return e?this.$emit("update:total.explicit"):this.$emit("update:total"),n}}}},y=function(){var r=this,n=r.$createElement,t=r._self._c||n;return t("div",[r._m(0),r._v(" "),t("div",{staticClass:"Calculator"},[t("header",{staticClass:"Calculator-header"},[t("div",{staticClass:"Calculator-formula",attrs:{"data-formula":""}},[t("span",{staticClass:"Calculator-formulaOverflow"}),r._v(" "),t("span",{staticClass:"Calculator-formulaList"},[r._v(r._s(r.formuoli))])]),r._v(" "),t("div",{staticClass:"Calculator-operands"},[t("span",{staticClass:"Calculator-currentOperand",class:{"has-error":r.error},style:{"font-size":r.font.size,"font-weight":r.font.weight},attrs:{"data-total":""}},[r.error?t("span",[r._v("Error")]):r.mode&r.MODE_SHOW_TOTAL?t("span",[r._v(r._s(r.total))]):t("span",[r._v(r._s(r.currentOperand))])])])]),r._v(" "),t("div",{staticClass:"Calculator-body"},[t("div",{staticClass:"Calculator-buttonsContainer"},r._l(r.buttons,(function(n){return t("button",{key:n.id,staticClass:"Calculator-button",class:n.className,attrs:{"data-id":n.id},on:{click:function(t){return r.exec(n.action,n.args)}}},[t("span",{domProps:{innerHTML:r._s(n.text)}})])})),0)]),r._v(" "),t("button",{staticClass:"Calculator-equals",attrs:{title:"equals"},on:{click:r.onExplicitEquals}},[t("div",{staticClass:"Calculator-equalsLine"}),r._v(" "),t("div",{staticClass:"Calculator-equalsLine"})])])])};y._withStripped=!0;var P=n.normalizeComponent({render:y,staticRenderFns:[function(){var r=this.$createElement,n=this._self._c||r;return n("noscript",[n("link",{attrs:{href:"https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400&display=swap",rel:"stylesheet"}})])}]},(function(r){r&&r("data-v-96a3ac04_0",{source:'html{--foreground--dark:#151515;--background-gradient-1:#b6b2ab;--background-gradient-2:#b3afa7;--background-gradient-3:#b8b5af;--background-gradient-4:#78736b;--background-gradient-5:#6f6862;--background-gradient-6:#58504b;--background-gradient-7:#5f574e;--background-gradient-8:#625a51;--gradient-blue-1:rgba(90,96,114,0.76);--gradient-blue-2:rgba(29,32,37,0.8);--gradient-orange-1:#ff8d4b;--gradient-orange-2:#ff542e;--calculator-width:260px;--header-padding-left:20px;--something-height:22px}.Calculator,.Calculator *,.Calculator :after,.Calculator :before{box-sizing:inherit}.Calculator{box-shadow:12px 18px 45px 0 rgba(0,0,0,.25);cursor:default;font-family:Source Sans Pro;line-height:1.5;margin:0 auto;position:relative;user-select:none;width:var(--calculator-width);z-index:1}.Calculator-header{background:#fff;overflow:hidden;padding:20px var(--header-padding-left);position:relative;text-align:right}.Calculator-formula{color:hsla(0,0%,62%,.76);font-size:15px;line-height:var(--something-height);min-height:var(--something-height);position:relative;white-space:nowrap;width:100%;word-wrap:normal}.Calculator-formula,.Calculator-formulaList{display:block;float:right}.Calculator__expressionsOverflow{color:#333;box-shadow:5px 0 20px 4px rgba(0,0,0,.3);font-weight:700;opacity:0;padding-right:0;text-align:center;transition:opacity .5s;transform:translateY(-50%)}.Calculator__expressionsOverflow:before{content:""}.Calculator__expressionsOverflow.is-showing{opacity:1}.Calculator-operands{color:var(--foreground--dark);font-size:60px;font-weight:200;line-height:1.1;clear:both}.Calculator-currentOperand{display:block;float:right;line-height:60px;overflow:visible;min-height:60px;transition-duration:.2s;transition-property:font-size}.Calculator-currentOperand.has-error{color:#ef5334}.Calculator-body{background:#fff}.Calculator-buttonsContainer{display:flex;flex-wrap:wrap;overflow:visible;position:relative}.Calculator-buttonsContainer:before{background-color:rgba(90,95,114,.76);background-image:linear-gradient(180deg,rgba(90,95,114,.76),rgba(29,32,37,.8));box-shadow:17px 27px 72px 1px rgba(0,0,0,.3);content:"";filter:drop-shadow(0 0 7px rgba(0,0,0,.2));left:-18px;position:absolute;right:-18px;top:0;bottom:0}.Calculator-button{background-color:transparent;border:0;color:hsla(0,0%,100%,.8);cursor:pointer;display:flex;font-family:Source Sans Pro;font-size:22px;font-weight:300;justify-content:center;line-height:70px;outline:0;padding:0;position:relative;text-align:center;text-shadow:1px 1px 2px rgba(0,0,0,.15);transition:box-shadow .2s,background-color .15s;z-index:1;width:25%}.Calculator-button:hover{background-color:rgba(0,0,0,.08)}.Calculator-button.is-active,.Calculator-button:active{box-shadow:inset 0 3px 15px 0 rgba(0,0,0,.3)}.Calculator-button>span{display:block}.Calculator-button svg{left:50%;position:absolute;top:50%;transform:translate(-50%,-50%)}.Calculator-button path,.Calculator-button svg{fill:#fff}.Calculator-button.is-modulo,.Calculator-button.is-negation{font-size:18px}.Calculator-button.is-square{font-size:16px}.Calculator-button.is-division{font-size:20px}.Calculator-button.is-multiplication svg{width:11px}.Calculator-button.is-addition svg{width:13px}.Calculator-button.is-subtraction svg{width:14px}.Calculator-button.is-paren{display:flex;font-size:18px;width:12.5%}.Calculator-button--paren:active,.Calculator-button--paren:hover{background:initial!important;box-shadow:none!important;cursor:default!important}.Calculator-button--paren>span{flex:50%}.Calculator-equals{background-color:transparent;border:0;background-image:linear-gradient(90deg,#ff8d4b,#ff542e);cursor:pointer;display:block;padding:26px 0;outline:none;position:relative;width:100%;z-index:-1}.Calculator-equalsLine{background:#fff;box-shadow:0 0 2px rgba(0,0,0,.4);display:block;margin:0 auto 6px;width:20px;height:1px}.Calculator-equalsLine:last-child{margin-bottom:0}',map:{version:3,sources:["/mnt/c/Users/tony/Github/calculator/src/calculator.vue"],names:[],mappings:"AAgtBA,KACA,0BAAA,CAEA,+BAAA,CACA,+BAAA,CAEA,+BAAA,CACA,+BAAA,CAEA,+BAAA,CACA,+BAAA,CAEA,+BAAA,CACA,+BAAA,CAGA,sCAAA,CACA,oCAAA,CAEA,2BAAA,CACA,2BAAA,CAEA,wBAAA,CACA,0BAAA,CACA,uBACA,CAEA,iEAIA,kBACA,CAoBA,YACA,2CAAA,CACA,cAAA,CACA,2BAAA,CACA,eAAA,CACA,aAAA,CACA,iBAAA,CACA,gBAAA,CACA,6BAAA,CACA,SACA,CAEA,mBACA,eAAA,CACA,eAAA,CACA,uCAAA,CACA,iBAAA,CACA,gBACA,CAEA,oBACA,wBAAA,CAGA,cAAA,CACA,mCAAA,CACA,kCAAA,CACA,iBAAA,CACA,kBAAA,CACA,UAAA,CACA,gBACA,CAEA,4CAXA,aAAA,CACA,WAaA,CAGA,iCAEA,UAAA,CACA,wCAAA,CACA,eAAA,CACA,SAAA,CACA,eAAA,CACA,iBAAA,CACA,sBAAA,CACA,0BAGA,CAEA,wCACA,UACA,CAEA,4CACA,SACA,CAEA,qBACA,6BAAA,CACA,cAAA,CACA,eAAA,CACA,eAAA,CACA,UACA,CAEA,2BACA,aAAA,CACA,WAAA,CACA,gBAAA,CACA,gBAAA,CACA,eAAA,CACA,uBAAA,CACA,6BACA,CAEA,qCACA,aACA,CAEA,iBACA,eACA,CAEA,6BACA,YAAA,CACA,cAAA,CACA,gBAAA,CACA,iBACA,CAEA,oCACA,oCAAA,CACA,8EAIA,CACA,4CAAA,CACA,UAAA,CACA,0CAAA,CACA,UAAA,CACA,iBAAA,CACA,WAAA,CACA,KAAA,CACA,QACA,CAEA,mBACA,4BAAA,CACA,QAAA,CACA,wBAAA,CACA,cAAA,CACA,YAAA,CACA,2BAAA,CACA,cAAA,CACA,eAAA,CACA,sBAAA,CACA,gBAAA,CACA,SAAA,CACA,SAAA,CACA,iBAAA,CACA,iBAAA,CACA,uCAAA,CACA,+CAAA,CACA,SAAA,CACA,SACA,CAEA,yBACA,gCACA,CAEA,uDAEA,4CACA,CAEA,wBACA,aACA,CAEA,uBACA,QAAA,CACA,iBAAA,CACA,OAAA,CACA,8BACA,CAEA,+CAEA,SACA,CAEA,4DAEA,cACA,CAEA,6BACA,cACA,CAEA,+BACA,cACA,CAEA,yCACA,UACA,CAEA,mCACA,UACA,CAEA,sCACA,UACA,CAEA,4BACA,YAAA,CACA,cAAA,CACA,WACA,CAEA,iEAEA,4BAAA,CACA,yBAAA,CACA,wBACA,CAEA,+BACA,QACA,CAEA,mBACA,4BAAA,CACA,QAAA,CACA,uDAAA,CACA,cAAA,CACA,aAAA,CACA,cAAA,CACA,YAAA,CACA,iBAAA,CACA,UAAA,CACA,UACA,CAEA,uBACA,eAAA,CACA,iCAAA,CACA,aAAA,CACA,iBAAA,CACA,UAAA,CACA,UACA,CAEA,kCACA,eACA",file:"calculator.vue",sourcesContent:["<template>\r\n  <div>\r\n    <noscript>\r\n      <link\r\n        href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400&display=swap\"\r\n        rel=\"stylesheet\"\r\n      />\r\n    </noscript>\r\n    <div class=\"Calculator\">\r\n      <header class=\"Calculator-header\">\r\n        <div class=\"Calculator-formula\" data-formula>\r\n          <span class=\"Calculator-formulaOverflow\" />\r\n          <span class=\"Calculator-formulaList\">{{ formuoli }}</span>\r\n        </div>\r\n        <div class=\"Calculator-operands\">\r\n          <span\r\n            class=\"Calculator-currentOperand\"\r\n            data-total\r\n            :class=\"{ 'has-error': error }\"\r\n            :style=\"{\r\n              'font-size': font.size,\r\n              'font-weight': font.weight,\r\n            }\"\r\n          >\r\n            <span v-if=\"error\">Error</span>\r\n            <span v-else-if=\"mode & MODE_SHOW_TOTAL\">{{ total }}</span>\r\n            <span v-else>{{ currentOperand }}</span>\r\n          </span>\r\n        </div>\r\n      </header>\r\n      <div class=\"Calculator-body\">\r\n        <div class=\"Calculator-buttonsContainer\">\r\n          <button\r\n            v-for=\"button in buttons\"\r\n            :key=\"button.id\"\r\n            :data-id=\"button.id\"\r\n            :class=\"button.className\"\r\n            class=\"Calculator-button\"\r\n            @click=\"exec(button.action, button.args)\"\r\n          >\r\n            <span v-html=\"button.text\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <button\r\n        title=\"equals\"\r\n        class=\"Calculator-equals\"\r\n        @click=\"onExplicitEquals\"\r\n      >\r\n        <div class=\"Calculator-equalsLine\" />\r\n        <div class=\"Calculator-equalsLine\" />\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport evalmath, { isOperator } from './math'\r\n\r\nconst keyboardNumbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\r\nconst keyboardOperators = ['*', '+', '-', '/']\r\n\r\nconst ACTION_CLEAR = 'clear'\r\nconst ACTION_CLEAR_ENTRY = 'clearEntry'\r\nconst ACTION_NEGATE = 'negate'\r\nconst ACTION_UPDATE_OPERATOR = 'updateOperator'\r\nconst ACTION_APPEND_OPERAND = 'appendOperand'\r\nconst ACTION_ADD_PAREN = 'addParen'\r\nconst ACTION_BACKSPACE = 'backspace'\r\nconst ACTION_SHOW_TOTAL = 'showTotal'\r\n\r\nconst buttons = [\r\n  {\r\n    id: 'C',\r\n    text: 'C',\r\n    className: 'is-clear',\r\n    action: ACTION_CLEAR,\r\n  },\r\n\r\n  {\r\n    id: 'CE',\r\n    text: 'CE',\r\n    className: 'is-clearEntry',\r\n    action: ACTION_CLEAR_ENTRY,\r\n  },\r\n  {\r\n    id: 'negate',\r\n    text: '+/-',\r\n    className: 'is-negation',\r\n    action: ACTION_NEGATE,\r\n  },\r\n  {\r\n    id: 'modulo',\r\n    text: '%',\r\n    className: 'is-modulo',\r\n    action: ACTION_UPDATE_OPERATOR,\r\n    args: {\r\n      operator: '%',\r\n    },\r\n  },\r\n  // {\r\n  //   id: 4,\r\n  //   text: '√',\r\n  //   className: 'is-square',\r\n  //   action: ACTION_UPDATE_OPERATOR,\r\n  //   args: {\r\n  //     operator: '√',\r\n  //   },\r\n  // },\r\n\r\n  {\r\n    id: '7',\r\n    text: '7',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '7',\r\n    },\r\n  },\r\n  {\r\n    id: '8',\r\n    text: '8',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '8',\r\n    },\r\n  },\r\n  {\r\n    id: '9',\r\n    text: '9',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '9',\r\n    },\r\n  },\r\n  {\r\n    id: '/',\r\n    text: '/',\r\n    className: 'is-division',\r\n    action: ACTION_UPDATE_OPERATOR,\r\n    args: {\r\n      operator: '/',\r\n    },\r\n  },\r\n\r\n  {\r\n    id: '4',\r\n    text: '4',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '4',\r\n    },\r\n  },\r\n  {\r\n    id: '5',\r\n    text: '5',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '5',\r\n    },\r\n  },\r\n  {\r\n    id: '6',\r\n    text: '6',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '6',\r\n    },\r\n  },\r\n  {\r\n    id: '*',\r\n    className: 'is-multiplication',\r\n    text: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 192\"><path fill=\"inherit\" d=\"M180.2 0L95.8 84.3 11.8.4 0 12.2 84 96 0 179.9l11.8 11.7 84-83.8 84.4 84.2 11.8-11.7L107.6 96 192 11.8z\"/></svg>`,\r\n    action: ACTION_UPDATE_OPERATOR,\r\n    args: {\r\n      operator: '*',\r\n    },\r\n  },\r\n\r\n  {\r\n    id: '1',\r\n    text: '1',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '1',\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    text: '2',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '2',\r\n    },\r\n  },\r\n  {\r\n    id: '3',\r\n    text: '3',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '3',\r\n    },\r\n  },\r\n  {\r\n    id: '-',\r\n    className: 'is-subtraction',\r\n    text: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 17\"><path d=\"M256 17H0V0h256v17z\"/></svg>\r\n`,\r\n    action: ACTION_UPDATE_OPERATOR,\r\n    args: {\r\n      operator: '-',\r\n    },\r\n  },\r\n\r\n  {\r\n    id: '0',\r\n    text: '0',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '0',\r\n    },\r\n  },\r\n  {\r\n    id: '(',\r\n    text: '(',\r\n    className: ['is-paren', 'is-open-paren'],\r\n    action: ACTION_ADD_PAREN,\r\n    args: {\r\n      operator: '(',\r\n    },\r\n  },\r\n  {\r\n    id: ')',\r\n    text: ')',\r\n    className: ['is-paren', 'is-close-paren'],\r\n    action: ACTION_ADD_PAREN,\r\n    args: {\r\n      operator: ')',\r\n    },\r\n  },\r\n\r\n  {\r\n    id: '.',\r\n    text: '.',\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: '.',\r\n    },\r\n  },\r\n  {\r\n    id: '+',\r\n    text: '',\r\n    className: 'is-addition',\r\n    text: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\"><path d=\"M256 137H136v119h-17V137H0v-17h119V0h17v120h120v17z\"/></svg>`,\r\n    action: ACTION_UPDATE_OPERATOR,\r\n    args: {\r\n      operator: '+',\r\n    },\r\n  },\r\n]\r\n\r\n// Mode show total causes the total to be displayed in the current operand display\r\nconst MODE_SHOW_TOTAL = 1 << 1\r\n// Mode insert operand causes the current operand to be overwritten. After the first character has been written, the mode should go to mode append operand\r\nconst MODE_INSERT_OPERAND = 1 << 2\r\n// Mode append operand causes any operand parts to be appended to the current operand\r\nconst MODE_APPEND_OPERAND = 1 << 3\r\n\r\n// The maximum number of digits the current operand may be\r\nconst MAX_NUMBER_LENGTH = Number.MAX_SAFE_INTEGER.toString().length\r\n\r\nfunction isNumberPart(str) {\r\n  return /^[0-9.]/.test(str)\r\n}\r\n\r\n// Debug function for flags\r\nfunction getFlags(flags) {\r\n  let arr = []\r\n\r\n  if (flags & MODE_SHOW_TOTAL) {\r\n    arr.push('MODE_SHOW_TOTAL')\r\n  }\r\n  if (flags & MODE_INSERT_OPERAND) {\r\n    arr.push('MODE_INSERT_OPERAND')\r\n  }\r\n\r\n  if (flags & MODE_APPEND_OPERAND) {\r\n    arr.push('MODE_APPEND_OPERAND')\r\n  }\r\n\r\n  return arr.join('|')\r\n}\r\n\r\nconst defaultCommands = [\r\n  {\r\n    match: {\r\n      key: 'Enter',\r\n    },\r\n    action: ACTION_SHOW_TOTAL,\r\n  },\r\n  {\r\n    match: {\r\n      key: 'Backspace',\r\n    },\r\n    action: ACTION_BACKSPACE,\r\n  },\r\n  {\r\n    match: {\r\n      key: 'Escape',\r\n    },\r\n    action: ACTION_CLEAR,\r\n  },\r\n  {\r\n    match: {\r\n      key: 'Delete',\r\n    },\r\n    action: ACTION_CLEAR_ENTRY,\r\n  },\r\n  ...keyboardNumbers.map(n => ({\r\n    match: {\r\n      key: n,\r\n    },\r\n    action: ACTION_APPEND_OPERAND,\r\n    args: {\r\n      value: n,\r\n    },\r\n  })),\r\n  ...keyboardOperators.map(n => ({\r\n    match: {\r\n      key: n,\r\n    },\r\n    action: ACTION_UPDATE_OPERATOR,\r\n    args: {\r\n      value: n,\r\n    },\r\n  })),\r\n]\r\n\r\nexport default {\r\n  props: {\r\n    commands: {\r\n      type: Array,\r\n      default: () => defaultCommands,\r\n    },\r\n    defaultFormula: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      MODE_SHOW_TOTAL,\r\n      MODE_INSERT_OPERAND,\r\n      MODE_APPEND_OPERAND,\r\n      activeButtons: [],\r\n      expressions: this.$props.defaultFormula.slice(0),\r\n      buttons,\r\n      currentOperand: '147',\r\n      currentOperator: '-',\r\n      mode: MODE_SHOW_TOTAL | MODE_INSERT_OPERAND,\r\n      openParenStack: 0,\r\n      error: null,\r\n      total: 147,\r\n    }\r\n  },\r\n  computed: {\r\n    formuoli() {\r\n      return this.expressions\r\n        .map((str, index, array) => {\r\n          const s = str.trim()\r\n\r\n          if (array[index - 1] === '(') {\r\n            return s\r\n          } else if (s === ')') {\r\n            return s\r\n          } else if (s[0] === '-' && isNumberPart(s[1])) {\r\n            return ' ' + str\r\n          } else {\r\n            return ' ' + s\r\n          }\r\n\r\n          return str\r\n        })\r\n        .join('')\r\n    },\r\n    font() {\r\n      // TODO: Change this to be some equation\r\n      let length\r\n\r\n      if (this.mode & MODE_SHOW_TOTAL) {\r\n        length = this.total.toString().length\r\n      } else {\r\n        length = this.currentOperand.toString().length\r\n      }\r\n\r\n      let size\r\n      let weight\r\n\r\n      if (length < 8) {\r\n        size = '60px'\r\n        weight = '200'\r\n      } else if (length <= MAX_NUMBER_LENGTH) {\r\n        size = '28px'\r\n        weight = '300'\r\n      } else if (length >= MAX_NUMBER_LENGTH) {\r\n        size = '24px'\r\n        weight = '300'\r\n      }\r\n\r\n      return { size, weight }\r\n    },\r\n  },\r\n  mounted() {\r\n    window.addEventListener('keydown', this.onKeyDown)\r\n  },\r\n  methods: {\r\n    onKeyDown(e) {\r\n      if (event.defaultPrevented) {\r\n        return\r\n      }\r\n\r\n      this.commands.forEach(command => {\r\n        Object.keys(command.match).map(key => {\r\n          const value = command.match[key]\r\n\r\n          if (e[key] === value) {\r\n            this.exec(command.action, command.args)\r\n            this.$emit('key', {\r\n              key: e.key,\r\n              args: {\r\n                ...command.args,\r\n              },\r\n            })\r\n          }\r\n        })\r\n      })\r\n    },\r\n    onExplicitEquals() {\r\n      this.showTotal({ explicit: true })\r\n    },\r\n    exec(action, args) {\r\n      console.log(action)\r\n\r\n      switch (action) {\r\n        case ACTION_BACKSPACE: {\r\n          this.backspace(args)\r\n          this.$emit('backspace')\r\n          break\r\n        }\r\n        case ACTION_CLEAR: {\r\n          this.clear(args)\r\n          this.$emit('clear')\r\n          break\r\n        }\r\n        case ACTION_CLEAR_ENTRY: {\r\n          this.clearEntry(args)\r\n          this.$emit('clear-entry')\r\n          break\r\n        }\r\n        case ACTION_NEGATE: {\r\n          this.negate(args)\r\n          this.$emit('negate')\r\n          break\r\n        }\r\n        case ACTION_UPDATE_OPERATOR: {\r\n          this.updateOperator(args)\r\n          this.$emit('operator-update')\r\n          break\r\n        }\r\n        case ACTION_APPEND_OPERAND: {\r\n          this.appendOperand(args)\r\n          this.$emit('operand-append')\r\n          break\r\n        }\r\n        case ACTION_ADD_PAREN: {\r\n          this.addParen(args)\r\n          this.$emit('paren-add')\r\n          break\r\n        }\r\n        default: {\r\n          if (process.env.NODE_ENV === 'development') {\r\n            console.error(`action not found: \"${action}\"`)\r\n          }\r\n        }\r\n      }\r\n\r\n      this.showTotal()\r\n    },\r\n    clear() {\r\n      this.expressions = []\r\n      this.currentOperand = '0'\r\n      this.currentOperator = ''\r\n      this.openParenStack = 0\r\n      this.mode = MODE_SHOW_TOTAL | MODE_INSERT_OPERAND\r\n      this.error = null\r\n      this.total = 0\r\n    },\r\n\r\n    backspace() {\r\n      let operand = this.currentOperand.slice(0, -1)\r\n\r\n      if (operand.length === 0) {\r\n        operand = '0'\r\n      }\r\n\r\n      this.currentOperand = operand\r\n    },\r\n\r\n    clearEntry() {\r\n      this.currentOperand = '0'\r\n    },\r\n\r\n    negate() {\r\n      // Only add negative sign if not zero\r\n      if (this.currentOperand !== 0) {\r\n        this.currentOperand = (-this.currentOperand).toString()\r\n      }\r\n\r\n      // console.log(this.currentOperand)\r\n    },\r\n\r\n    updateOperator({ operator }) {\r\n      const length = this.expressions.length\r\n      const last = this.expressions[length - 1] || ''\r\n      const { mode, currentOperand } = this\r\n\r\n      if (mode & MODE_INSERT_OPERAND) {\r\n        // console.log('MODE_INSERT_OPERAND')\r\n\r\n        if (length === 0) {\r\n          this.expressions.push(currentOperand, operator)\r\n        } else if (isOperator(last)) {\r\n          // console.log('isoplast');                            // APPEND_OP LOG\r\n          this.expressions.pop()\r\n          this.expressions.push(operator)\r\n        } else if (last === ')') {\r\n          // console.log('nope');                                // APPEND_OP LOG\r\n          this.expressions.push(operator)\r\n        } else if (last === '(') {\r\n          this.expressions.push(currentOperand, operator)\r\n        }\r\n      } else if (mode & MODE_APPEND_OPERAND) {\r\n        // console.log('MODE_APPEND_OPERAND')\r\n\r\n        if (length === 0) {\r\n          this.expressions.push(currentOperand, operator)\r\n        } else if (isOperator(last)) {\r\n          this.expressions.push(currentOperand, operator)\r\n        } else if (last === ')') {\r\n          this.expressions.push(operator)\r\n        } else if (last === '(') {\r\n          this.expressions.push(currentOperand, operator)\r\n        }\r\n      }\r\n\r\n      this.currentOperator = operator\r\n      this.mode = MODE_INSERT_OPERAND | MODE_SHOW_TOTAL\r\n\r\n      // console.log('UPDATE_OPERATOR:', this.expressions)\r\n    },\r\n\r\n    addParen({ operator }) {\r\n      const last = this.expressions[this.expressions.length - 1] || ''\r\n      const { currentOperand, openParenStack } = this\r\n\r\n      // console.log('ADD_PAREN:', {last, operator});\r\n\r\n      if (operator === ')' && openParenStack === 0) {\r\n        // No need to add closing paren if there is no open paren\r\n        return\r\n      } else if (operator === '(' && last === ')') {\r\n        // FIXME: Look at real calculator for semantics\r\n        return\r\n      }\r\n\r\n      if (last === '(' && operator === ')') {\r\n        // Handle immediate closed parens\r\n        this.expressions.push(currentOperand, operator)\r\n      } else if (isOperator(last) && operator === ')') {\r\n        // Automatically append current operand when expressions\r\n        // is \"(5 *\" so result is \"(5 * 5)\"\r\n        this.expressions.push(currentOperand, operator)\r\n      } else if ((isOperator(last) || length === 0) && operator === '(') {\r\n        // Handle \"5 *\" where the result is \"5 * (\" and \"(\" is the beginning\r\n        // of a new group expression\r\n        this.expressions.push(operator)\r\n      }\r\n\r\n      if (operator === '(') {\r\n        this.openParenStack++\r\n      } else if (operator === ')') {\r\n        this.openParenStack--\r\n      }\r\n    },\r\n\r\n    appendOperand({ value, operator }) {\r\n      const currentOperand = this.currentOperand\r\n      let newOperand = currentOperand\r\n      let newMode\r\n\r\n      // Don't append 0 to 0\r\n      if (value === '0' && currentOperand[0] === '0') {\r\n        return\r\n      } else if (value === '.' && currentOperand.includes('.')) {\r\n        // Avoid appending multiple decimals\r\n        return\r\n      }\r\n\r\n      // Switch modes from showing the total to the current operand\r\n      if (this.mode & MODE_SHOW_TOTAL) {\r\n        newMode = MODE_INSERT_OPERAND\r\n      }\r\n\r\n      if (this.mode & MODE_INSERT_OPERAND) {\r\n        // console.log('INSERT');\r\n        newOperand = value.toString()\r\n        this.mode = MODE_APPEND_OPERAND\r\n      } else {\r\n        // console.log('APPEND');\r\n        newOperand += value.toString()\r\n      }\r\n\r\n      // TODO: Update font size, actually should do that in the vm\r\n      this.currentOperand = newOperand.substring(0, MAX_NUMBER_LENGTH)\r\n    },\r\n\r\n    showTotal({ explicit } = {}) {\r\n      const last = this.expressions[this.expressions.length - 1] || ''\r\n      const expressions = this.expressions.slice(0)\r\n      const currentOperand = this.currentOperand\r\n      const mode = this.mode\r\n      const currentTotal = this.total\r\n      const openParenStack = this.openParenStack\r\n      const isFirstNumber = typeof Number(expressions[0]) === 'number'\r\n      const isSecondOperator = isOperator(expressions[1] || '')\r\n      const length = expressions.length\r\n      let times = openParenStack\r\n      let total\r\n\r\n      if (expressions.length === 0) {\r\n        return\r\n      } else if (\r\n        explicit &&\r\n        isFirstNumber &&\r\n        isSecondOperator &&\r\n        length === 2\r\n      ) {\r\n        // Handle case where expressions is 5 *\r\n\r\n        // console.log('explicit && isFirstNumber && isSecondOperator');\r\n        expressions.push(currentOperand)\r\n      } else if (explicit && isOperator(last)) {\r\n        // Handle case where expressions is ['5', '*', '4', '+'] and\r\n        // the total is being explicitly being requested\r\n\r\n        // console.log('explicit && isOperator(last)', isOperator(last), last);\r\n        if (mode & MODE_INSERT_OPERAND) {\r\n          expressions.push(currentTotal)\r\n        } else if (mode & MODE_APPEND_OPERAND) {\r\n          expressions.push(currentOperand)\r\n        }\r\n      } else if (isOperator(last)) {\r\n        // Handle case where expressions is ['5', '*', '4', '+']\r\n        expressions.pop()\r\n      }\r\n\r\n      if (explicit) {\r\n        // Automatically close parens when explicitly requesting\r\n        // the total\r\n        let times = openParenStack\r\n\r\n        while (times-- > 0) {\r\n          expressions.push(')')\r\n        }\r\n      } else if (!explicit && openParenStack === 1) {\r\n        // Auto close if there is only one missing paren\r\n        expressions.push(')')\r\n      }\r\n\r\n      try {\r\n        total = evalmath(expressions.join(' '))\r\n\r\n        if (explicit) {\r\n          this.clear()\r\n        }\r\n\r\n        this.total = total\r\n      } catch (err) {\r\n        if (explicit) {\r\n          this.clear()\r\n          this.error = err\r\n          console.log(err)\r\n          this.$emit('formula-error', err)\r\n        }\r\n      }\r\n\r\n      // console.log(\r\n      //   'SHOW_TOTAL; Expressions: \"%s\"; Total: %s; Explicit: %s',\r\n      //   expressions.join(' '),\r\n      //   total,\r\n      //   !!explicit\r\n      // )\r\n\r\n      if (explicit) {\r\n        this.$emit('update:total.explicit')\r\n      } else {\r\n        this.$emit('update:total')\r\n      }\r\n\r\n      return total\r\n    },\r\n  },\r\n}\r\n<\/script>\r\n\r\n<style>\r\n/* // */\r\n/* // -> Design credit goes to Jaroslav Getman */\r\n/* // -> https://dribbble.com/shots/2334270-004-Calculator */\r\n/* // */\r\n\r\nhtml {\r\n  --foreground--dark: #151515;\r\n\r\n  --background-gradient-1: #b6b2ab;\r\n  --background-gradient-2: #b3afa7;\r\n\r\n  --background-gradient-3: #b8b5af;\r\n  --background-gradient-4: #78736b;\r\n\r\n  --background-gradient-5: #6f6862;\r\n  --background-gradient-6: #58504b;\r\n\r\n  --background-gradient-7: #5f574e;\r\n  --background-gradient-8: #625a51;\r\n\r\n  /* // I don't know how to get the colors closer here, would need the actual hsla */\r\n  --gradient-blue-1: hsla(226, 12%, 40%, 0.76);\r\n  --gradient-blue-2: hsla(222, 12%, 13%, 0.8);\r\n\r\n  --gradient-orange-1: #ff8d4b;\r\n  --gradient-orange-2: #ff542e;\r\n\r\n  --calculator-width: 260px;\r\n  --header-padding-left: 20px;\r\n  --something-height: 22px;\r\n}\r\n\r\n.Calculator,\r\n.Calculator *,\r\n.Calculator *:before,\r\n.Calculator *:after {\r\n  box-sizing: inherit;\r\n}\r\n\r\n/*\r\n.CalculatorBackground {\r\n  background-size: cover;\r\n  background-repeat: no-repeat;\r\n  background-image: linear-gradient(\r\n    135deg,\r\n    #b6b2ab 0%,\r\n    #b3afa7 25%,\r\n    #b8b5af 25%,\r\n    #78736b 50%,\r\n    #6f6862 50%,\r\n    #58504b 75%,\r\n    #5f574e 75%,\r\n    #625a51 100%\r\n  );\r\n  min-height: 100vh;\r\n} */\r\n\r\n.Calculator {\r\n  box-shadow: 12px 18px 45px 0 rgba(0, 0, 0, 0.25);\r\n  cursor: default;\r\n  font-family: Source Sans Pro;\r\n  line-height: 1.5;\r\n  margin: 0 auto;\r\n  position: relative;\r\n  user-select: none;\r\n  width: var(--calculator-width);\r\n  z-index: 1;\r\n}\r\n\r\n.Calculator-header {\r\n  background: white;\r\n  overflow: hidden;\r\n  padding: 20px var(--header-padding-left);\r\n  position: relative;\r\n  text-align: right;\r\n}\r\n\r\n.Calculator-formula {\r\n  color: rgba(158, 158, 158, 0.76);\r\n  display: block;\r\n  float: right;\r\n  font-size: 15px;\r\n  line-height: var(--something-height);\r\n  min-height: var(--something-height);\r\n  position: relative;\r\n  white-space: nowrap;\r\n  width: 100%;\r\n  word-wrap: normal;\r\n}\r\n\r\n.Calculator-formulaList {\r\n  display: block;\r\n  float: right;\r\n}\r\n\r\n/* // \tNot sure how to represent that there are more expressions to the left */\r\n.Calculator__expressionsOverflow {\r\n  /* $width: 2px */\r\n  color: #333;\r\n  box-shadow: 5px 0 20px 4px rgba(0, 0, 0, 0.3);\r\n  font-weight: 700;\r\n  opacity: 0;\r\n  padding-right: 0px;\r\n  text-align: center;\r\n  transition: opacity 0.5s;\r\n  transform: translate(0, -50%);\r\n  /* +position(absolute, 50% null null negative($header-padding-left) - $width - 2) */\r\n  /* +size($width $height - 5) */\r\n}\r\n\r\n.Calculator__expressionsOverflow:before {\r\n  content: '';\r\n}\r\n\r\n.Calculator__expressionsOverflow.is-showing {\r\n  opacity: 1;\r\n}\r\n\r\n.Calculator-operands {\r\n  color: var(--foreground--dark);\r\n  font-size: 60px;\r\n  font-weight: 200;\r\n  line-height: 1.1;\r\n  clear: both;\r\n}\r\n\r\n.Calculator-currentOperand {\r\n  display: block;\r\n  float: right;\r\n  line-height: 60px;\r\n  overflow: visible;\r\n  min-height: 60px;\r\n  transition-duration: 0.2s;\r\n  transition-property: font-size;\r\n}\r\n\r\n.Calculator-currentOperand.has-error {\r\n  color: hsla(10, 85%, 57%, 1);\r\n}\r\n\r\n.Calculator-body {\r\n  background: white;\r\n}\r\n\r\n.Calculator-buttonsContainer {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  overflow: visible;\r\n  position: relative;\r\n}\r\n\r\n.Calculator-buttonsContainer:before {\r\n  background-color: rgba(90, 95, 114, 0.76);\r\n  background-image: linear-gradient(\r\n    to bottom,\r\n    rgba(90, 95, 114, 0.76),\r\n    rgba(29, 32, 37, 0.8)\r\n  );\r\n  box-shadow: 17px 27px 72px 1px rgba(0, 0, 0, 0.3);\r\n  content: '';\r\n  filter: drop-shadow(0px 0px 7px rgba(0, 0, 0, 0.2));\r\n  left: -18px;\r\n  position: absolute;\r\n  right: -18px;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n.Calculator-button {\r\n  background-color: transparent;\r\n  border: 0;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  cursor: pointer;\r\n  display: flex;\r\n  font-family: Source Sans Pro;\r\n  font-size: 22px;\r\n  font-weight: 300;\r\n  justify-content: center;\r\n  line-height: 70px;\r\n  outline: 0;\r\n  padding: 0;\r\n  position: relative;\r\n  text-align: center;\r\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.15);\r\n  transition: box-shadow 0.2s, background-color 0.15s;\r\n  z-index: 1;\r\n  width: 25%;\r\n}\r\n\r\n.Calculator-button:hover {\r\n  background-color: rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.Calculator-button.is-active,\r\n.Calculator-button:active {\r\n  box-shadow: inset 0 3px 15px 0 rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.Calculator-button > span {\r\n  display: block;\r\n}\r\n\r\n.Calculator-button svg {\r\n  left: 50%;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n.Calculator-button svg,\r\n.Calculator-button path {\r\n  fill: rgba(255, 255, 255, 1);\r\n}\r\n\r\n.Calculator-button.is-negation,\r\n.Calculator-button.is-modulo {\r\n  font-size: 18px;\r\n}\r\n\r\n.Calculator-button.is-square {\r\n  font-size: 16px;\r\n}\r\n\r\n.Calculator-button.is-division {\r\n  font-size: 20px;\r\n}\r\n\r\n.Calculator-button.is-multiplication svg {\r\n  width: 11px;\r\n}\r\n\r\n.Calculator-button.is-addition svg {\r\n  width: 13px;\r\n}\r\n\r\n.Calculator-button.is-subtraction svg {\r\n  width: 14px;\r\n}\r\n\r\n.Calculator-button.is-paren {\r\n  display: flex;\r\n  font-size: 18px;\r\n  width: 12.5%;\r\n}\r\n\r\n.Calculator-button--paren:hover,\r\n.Calculator-button--paren:active {\r\n  background: initial !important;\r\n  box-shadow: none !important;\r\n  cursor: default !important;\r\n}\r\n\r\n.Calculator-button--paren > span {\r\n  flex: 50%;\r\n}\r\n\r\n.Calculator-equals {\r\n  background-color: transparent;\r\n  border: 0;\r\n  background-image: linear-gradient(to right, #ff8d4b, #ff542e);\r\n  cursor: pointer;\r\n  display: block;\r\n  padding: 26px 0;\r\n  outline: none;\r\n  position: relative;\r\n  width: 100%;\r\n  z-index: -1;\r\n}\r\n\r\n.Calculator-equalsLine {\r\n  background: white;\r\n  box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.4);\r\n  display: block;\r\n  margin: 0 auto 6px;\r\n  width: 20px;\r\n  height: 1px;\r\n}\r\n\r\n.Calculator-equalsLine:last-child {\r\n  margin-bottom: 0;\r\n}\r\n</style>\r\n"]},media:void 0})}),N,void 0,!1,void 0,!1,n.createInjector,void 0,void 0);function k(r){k.installed||(k.installed=!0,r.component("calculator",P))}var T={install:k},D=null;return"undefined"!=typeof window?D=window.Vue:"undefined"!=typeof global&&(D=global.Vue),D&&D.use(T),r.default=P,r.install=k,r}({},vueRuntimeHelpers);
